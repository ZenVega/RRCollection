{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/App.js\";\nimport React, { useState } from 'react';\nimport Searchbar from './SearchBar';\nimport Collection from './Collection';\nimport SearchResults from './SearchResults';\nimport Adder from './Adder';\nimport Discogs from './util/Discogs';\nimport './App.css';\n\nfunction App() {\n  const [search, setSearch] = useState([]);\n  const [type, setType] = useState(\"release_title\");\n  const [hidden, setHidden] = useState(\"true\");\n  const [records, setRecords] = useState([{\n    title: \"Chocolate & Cheese\",\n    artistID: 1,\n    label: \"Ween Records\",\n    year: 2000,\n    size: 12\n  }, {\n    title: \"Quebec\",\n    artistID: 1,\n    label: \"Ween Records\",\n    year: 2005,\n    size: 12\n  }, {\n    title: \"Selftitled\",\n    artistID: 2,\n    label: \"Static Shock\",\n    year: 2005,\n    size: 12\n  }]);\n  const [artists, setArtists] = useState([{\n    name: \"Ween\",\n    artistID: 1\n  }, {\n    name: \"AUS\",\n    artistID: 2\n  }]);\n  const [labels, setLabels] = useState([{\n    name: \"static shock\",\n    labelID: 1\n  }, {\n    name: \"noise solution\",\n    labelID: 2\n  }, {\n    name: \"weenRecs\",\n    labelID: 3\n  }]);\n\n  const handleSearch = (term, type) => {\n    hide(\"true\");\n    Discogs.search(term, type).then(response => setSearch(response.results));\n  };\n\n  const sortBy = interest => {\n    console.log('sortBy');\n    setType(interest);\n  };\n\n  const addRecord = (artist, title, year, label, size) => {\n    let artistID;\n    let artistObj = artists.find(inListArtist => inListArtist.name === artist);\n\n    if (artistObj) {\n      artistID = artistObj.artistID;\n    }\n\n    if (!artistID) {\n      artistID = Math.floor(Math.random() * 10 * 1000);\n      const artistsList = [...artists, {\n        name: artist,\n        artistID: artistID\n      }];\n      setArtists(artistsList);\n    }\n\n    let labelID;\n    let labelObj = artists.find(inListArtist => inListArtist.name === artist);\n\n    if (artistObj) {\n      artistID = artistObj.artistID;\n    }\n\n    if (!artistID) {\n      artistID = Math.floor(Math.random() * 10 * 1000);\n      const artistsList = [...artists, {\n        name: artist,\n        artistID: artistID\n      }];\n      setArtists(artistsList);\n    }\n\n    const recordList = [...records, {\n      artistID,\n      title,\n      year,\n      size,\n      labelID\n    }];\n    setRecords(recordList);\n  };\n\n  const removeRecord = index => {\n    const recordList = [...records];\n    recordList.splice(index, 1);\n    setRecords(recordList);\n  };\n\n  const hide = bool => {\n    setHidden(bool);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Searchbar, {\n    searchFor: type,\n    onSearch: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Adder, {\n    onAdd: addRecord,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SearchResults, {\n    isHidden: hidden,\n    results: search,\n    onAdd: addRecord,\n    sort: sortBy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Collection, {\n    labels: labels,\n    artists: artists,\n    records: records,\n    removeRecord: removeRecord,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/App.js"],"names":["React","useState","Searchbar","Collection","SearchResults","Adder","Discogs","App","search","setSearch","type","setType","hidden","setHidden","records","setRecords","title","artistID","label","year","size","artists","setArtists","name","labels","setLabels","labelID","handleSearch","term","hide","then","response","results","sortBy","interest","console","log","addRecord","artist","artistObj","find","inListArtist","Math","floor","random","artistsList","labelObj","recordList","removeRecord","index","splice","bool"],"mappings":"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","sourcesContent":["import React, { useState} from 'react';\nimport Searchbar from './SearchBar';\nimport Collection from './Collection'\nimport SearchResults from './SearchResults';\nimport Adder from './Adder';\nimport Discogs from './util/Discogs'\nimport './App.css';\n\n\nfunction App() {\n\n  const [search, setSearch] = useState([]);\n  const [type, setType] = useState(\"release_title\");\n  const [hidden, setHidden] = useState(\"true\");\n\n  const [records, setRecords] = useState([\n    {\n      title:\"Chocolate & Cheese\",\n      artistID: 1,\n      label: \"Ween Records\",\n      year: 2000,\n      size: 12\n    },\n    {\n      title:\"Quebec\",\n      artistID: 1,\n      label: \"Ween Records\",\n      year: 2005,\n      size: 12\n    },\n    {\n      title:\"Selftitled\",\n      artistID: 2,\n      label: \"Static Shock\",\n      year: 2005,\n      size: 12\n    },\n    \n  ]);\n  const [artists, setArtists] = useState([\n    {\n      name: \"Ween\",\n      artistID: 1\n    },\n    {\n      name: \"AUS\",\n      artistID: 2\n    }]);\n\n  const [labels, setLabels] = useState([\n    {\n      name: \"static shock\",\n      labelID: 1\n    },\n    {\n      name: \"noise solution\",\n      labelID: 2\n    },\n    {\n      name: \"weenRecs\",\n      labelID: 3\n    }\n\n  ]);\n\n  const handleSearch = (term, type) => {\n    hide(\"true\");\n    Discogs.search(term, type).then(response => setSearch(response.results));\n  }\n\n  const sortBy = (interest) => {\n      console.log('sortBy')\n      setType(interest)\n  }\n\n  const addRecord = (artist, title, year, label, size) => {\n\n    let artistID;\n    let artistObj = artists.find(inListArtist => inListArtist.name === artist);\n    if(artistObj){\n      artistID = artistObj.artistID;\n    }\n\n    if(!artistID){\n      artistID = Math.floor(Math.random()*10*1000);\n\n      const artistsList = [...artists, {\n        name: artist,\n        artistID: artistID\n      }];\n      \n      setArtists(artistsList);\n    }\n\n    let labelID;\n    let labelObj = artists.find(inListArtist => inListArtist.name === artist);\n    if(artistObj){\n      artistID = artistObj.artistID;\n    }\n\n    if(!artistID){\n      artistID = Math.floor(Math.random()*10*1000);\n\n      const artistsList = [...artists, {\n        name: artist,\n        artistID: artistID\n      }];\n      \n      setArtists(artistsList);\n    }\n    \n    const recordList = [...records, {\n      artistID,\n      title,\n      year,\n      size,\n      labelID\n    }];\n    setRecords(recordList);\n  };\n\n  const removeRecord = index => {\n    const recordList = [...records];\n    recordList.splice(index, 1);\n    setRecords(recordList);\n\n  };\n\n  const hide = (bool) => {\n    setHidden(bool);\n  }\n\n  return (\n    <div className=\"App\">\n      <Searchbar \n        searchFor={type}\n        onSearch={handleSearch}\n        />\n      <Adder onAdd={addRecord} />\n      <SearchResults \n        isHidden={hidden} \n        results={search} \n        onAdd={addRecord}\n        sort={sortBy}/>\n      <Collection \n        labels={labels}\n        artists={artists}\n        records={records}\n        removeRecord={removeRecord}/>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}