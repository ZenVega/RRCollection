{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment, useState } from 'react';\n\nconst InputPlusAutofill = ({\n  term,\n  placeholder,\n  list,\n  handleChange\n}) => {\n  let suggestions = list.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  console.log(suggestions);\n  const [unclicked, setUnclicked] = useState(true);\n  const [focused, setFocused] = useState(false);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      top\n    },\n    className: \"AutofillInput\",\n    type: \"text\",\n    value: term,\n    onChange: e => {\n      setUnclicked(true);\n      handleChange(e.target.value);\n    },\n    onFocus: () => setFocused(true),\n    onBlur: () => setFocused(false),\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"suggestionWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, term && focused && unclicked && suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    className: \"suggestion\",\n    onClick: e => {\n      setUnclicked(false);\n      handleChange(suggestion);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, suggestion))));\n};\n\nexport default InputPlusAutofill;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","useState","InputPlusAutofill","term","placeholder","list","handleChange","suggestions","filter","string","toLowerCase","indexOf","console","log","unclicked","setUnclicked","focused","setFocused","top","e","target","value","map","suggestion","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAwC,OAAxC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,WAAP;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA;AAA1B,CAAD,KAA6C;AACrE,MAAIC,WAAW,GAAGF,IAAI,CAACG,MAAL,CAAYC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6BR,IAAI,CAACO,WAAL,EAA7B,IAAmD,CAAC,CAA1E,CAAlB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AAEA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAE;AAACiB,MAAAA;AAAD,KADT;AAEE,IAAA,SAAS,EAAC,eAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAEf,IAJT;AAKE,IAAA,QAAQ,EAAEgB,CAAC,IAAI;AAACJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAAoBT,MAAAA,YAAY,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AAA6B,KALnE;AAME,IAAA,OAAO,EAAE,MAAMJ,UAAU,CAAC,IAAD,CAN3B;AAOE,IAAA,MAAM,EAAE,MAAMA,UAAU,CAAC,KAAD,CAP1B;AAQE,IAAA,WAAW,EAAEb,WARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACID,IAAI,IAAIa,OAAR,IAAmBF,SAAnB,IAAgCP,WAAW,CAACe,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,kBAChD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAEL,CAAC,IAAI;AAACJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAAqBT,MAAAA,YAAY,CAACiB,UAAD,CAAZ;AAA2B,KAHjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKEA,UALF,CADgC,CADpC,CAXF,CADF;AA0BD,CAhCD;;AAkCA,eAAerB,iBAAf","sourcesContent":["import React, {Fragment, useState} from 'react';\n\nconst InputPlusAutofill = ({term, placeholder, list, handleChange}) => {\n  let suggestions = list.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  console.log(suggestions)\n  const [unclicked, setUnclicked] = useState(true); \n  const [focused, setFocused] = useState(false);\n\n  return (\n    <Fragment>\n      <input \n        style={{top}}\n        className=\"AutofillInput\"\n        type=\"text\"\n        value={term}\n        onChange={e => {setUnclicked(true); handleChange(e.target.value)}}\n        onFocus={() => setFocused(true)}\n        onBlur={() => setFocused(false)}\n        placeholder={placeholder}\n      />  \n      <div className=\"suggestionWrapper\">\n        { term && focused && unclicked && suggestions.map((suggestion, index) => ( \n          <p \n            key={index} \n            className=\"suggestion\" \n            onClick={e => {setUnclicked(false); handleChange(suggestion)  }}\n          >\n          { suggestion }\n          </p>\n        ))}\n      </div>\n\n    </Fragment>\n  )\n}\n\nexport default InputPlusAutofill;"]},"metadata":{},"sourceType":"module"}