{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction Autofill({\n  term,\n  array,\n  setTerm\n}) {\n  const dispatch = useDispatch();\n  const suggestions = array.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, \"//return listElement for each suggestion return term && suggestions.map((suggestion, index) => (\", /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    className: \"suggestion\",\n    onClick: e => dispatch(setTerm(suggestion)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, suggestion), \"))\");\n}\n\nexport default Autofill;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","useDispatch","Autofill","term","array","setTerm","dispatch","suggestions","filter","string","toLowerCase","indexOf","index","e","suggestion"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,QAAT,CAAmB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAnB,EAA2C;AAEzC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAaC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6BR,IAAI,CAACO,WAAL,EAA7B,IAAmD,CAAC,CAA3E,CAApB;AAGA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAME;AACE,IAAA,GAAG,EAAEE,KADP;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAEC,CAAC,IAAIP,QAAQ,CAACD,OAAO,CAACS,UAAD,CAAR,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGiDA,UAHjD,CANF,OADF;AAeD;;AAED,eAAeZ,QAAf","sourcesContent":["import React, {Fragment} from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction Autofill ({term, array, setTerm}) {\n\n  const dispatch = useDispatch();\n  const suggestions = array.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n\n  \n  return(\n    <Fragment>\n\n\n\n      //return listElement for each suggestion\n    return term && suggestions.map((suggestion, index) => (\n      <p \n        key={index} \n        className=\"suggestion\" \n        onClick={e => dispatch(setTerm(suggestion)) }>{suggestion}</p>\n    ))\n    </Fragment>\n  )\n\n}\n\nexport default Autofill;"]},"metadata":{},"sourceType":"module"}