{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst returnSuggestions = (term, array, setTerm, dispatch) => {};\n\nfunction Autofill({\n  term,\n  array,\n  setTerm\n}) {\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, \"//find match let suggestions = array.filter( string => string.toLowerCase().indexOf(term.toLowerCase()) > -1); //return listElement for each suggestion return term && suggestions.map((suggestion, index) => (\", /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    className: \"suggestion\",\n    onClick: e => dispatch(setTerm(suggestion)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, suggestion), \"))\");\n}\n\nexport default Autofill;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","useDispatch","returnSuggestions","term","array","setTerm","dispatch","Autofill","index","e","suggestion"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC,CAG7D,CAHD;;AAKA,SAASC,QAAT,CAAmB;AAACJ,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAnB,EAA2C;AAEzC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAGA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qOAUE;AACE,IAAA,GAAG,EAAEO,KADP;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAEC,CAAC,IAAIH,QAAQ,CAACD,OAAO,CAACK,UAAD,CAAR,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGiDA,UAHjD,CAVF,OADF;AAmBD;;AAED,eAAeH,QAAf","sourcesContent":["import React, {Fragment} from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst returnSuggestions = (term, array, setTerm, dispatch) => {\n\n\n}\n\nfunction Autofill ({term, array, setTerm}) {\n\n  const dispatch = useDispatch();\n\n  \n  return(\n    <Fragment >\n\n\n\n    //find match\n    let suggestions = array.filter(\n      string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n\n      //return listElement for each suggestion\n    return term && suggestions.map((suggestion, index) => (\n      <p \n        key={index} \n        className=\"suggestion\" \n        onClick={e => dispatch(setTerm(suggestion)) }>{suggestion}</p>\n    ))\n    </Fragment>\n  )\n\n}\n\nexport default Autofill;"]},"metadata":{},"sourceType":"module"}