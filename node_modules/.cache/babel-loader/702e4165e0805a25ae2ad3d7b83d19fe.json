{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction Autofill({\n  term,\n  list,\n  setTerm\n}) {\n  const dispatch = useDispatch();\n  let suggestions = list.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    className: \"suggestion\",\n    onClick: e => dispatch(setTerm(suggestion)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, suggestion)));\n}\n\nexport default Autofill;\nvonst;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","useDispatch","Autofill","term","list","setTerm","dispatch","suggestions","filter","string","toLowerCase","indexOf","map","suggestion","index","e","vonst"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,QAAT,CAAmB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAnB,EAA0C;AAExC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAIM,WAAW,GAAGH,IAAI,CAACI,MAAL,CAAYC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6BR,IAAI,CAACO,WAAL,EAA7B,IAAmD,CAAC,CAA1E,CAAlB;AAEA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIH,WAAW,CAACK,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,kBAClB;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAGC,CAAC,IAAIT,QAAQ,CAACD,OAAO,CAACQ,UAAD,CAAR,CAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKIA,UALJ,CADE,CADJ,CADF;AAcD;;AAED,eAAeX,QAAf;AAEAc,KAAK","sourcesContent":["import React, {Fragment} from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction Autofill ({term, list, setTerm}) {\n\n  const dispatch = useDispatch();\n  let suggestions = list.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  \n  return(\n    <Fragment>\n      { suggestions.map((suggestion, index) => ( \n      <p \n        key={index} \n        className=\"suggestion\" \n        onClick={ e => dispatch(setTerm(suggestion)) }\n      >\n        { suggestion }\n      </p>\n      ))}\n    </Fragment>\n  )\n\n}\n\nexport default Autofill;\n\nvonst"]},"metadata":{},"sourceType":"module"}