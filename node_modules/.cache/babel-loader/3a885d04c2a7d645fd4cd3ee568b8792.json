{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Collection.js\";\nimport React from 'react';\nimport Record from './Record';\nimport { useSelector } from 'react-redux';\n\nfunction Collection() {\n  let artists = useSelector(state => state.collection.artists);\n  let labels = useSelector(state => state.collection.labels);\n  let records = useSelector(state => state.collection.records);\n  let sortByTerm = useSelector(state => state.sortBy);\n\n  const displayArtist = id => {\n    let currentArtist = artists.find(artist => artist.artistID === id);\n\n    try {\n      return currentArtist.name;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const displayLabel = id => {\n    let currentLabel = labels.find(label => label.labelID === id);\n\n    try {\n      return currentLabel.name;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const sortBy = term => {\n    let newOrder = records.sort((a, b) => {\n      let objA;\n      let objB;\n\n      if (term === 'title') {\n        objA = a.title.toUpperCase();\n        objB = b.title.toUpperCase();\n      } else if (term === 'artist') {\n        objA = artists.find(artist => artist.artistID === a.artistID).name.toUpperCase();\n        objB = artists.find(artist => artist.artistID === b.artistID).name.toUpperCase();\n      }\n\n      let comparison = 0;\n\n      if (objA > objB) {\n        comparison = 1;\n      } else if (objA < objB) {\n        comparison = -1;\n      }\n\n      return comparison;\n    });\n    return newOrder.map((record, index) => /*#__PURE__*/React.createElement(Record, {\n      key: index,\n      index: index,\n      artist: displayArtist(record.artistID),\n      title: record.title,\n      year: record.year,\n      label: displayLabel(record.labelID),\n      size: record.size,\n      img: record.cover_imag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Collection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, sortBy(sortByTerm));\n}\n\nexport default Collection;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Collection.js"],"names":["React","Record","useSelector","Collection","artists","state","collection","labels","records","sortByTerm","sortBy","displayArtist","id","currentArtist","find","artist","artistID","name","err","console","log","displayLabel","currentLabel","label","labelID","term","newOrder","sort","a","b","objA","objB","title","toUpperCase","comparison","map","record","index","year","size","cover_imag"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Record from './Record';\nimport { useSelector } from 'react-redux';\n\n\n\nfunction Collection (){\n\n  let artists = useSelector(state => state.collection.artists);\n  let labels = useSelector(state => state.collection.labels);\n  let records = useSelector(state => state.collection.records);\n  let sortByTerm = useSelector(state => state.sortBy)\n\n  const displayArtist = (id) => {\n    let currentArtist = artists.find(artist => artist.artistID === id)\n    try{\n      return currentArtist.name;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n  const displayLabel = (id) => {\n    let currentLabel = labels.find(label => label.labelID === id)\n    try{\n      return currentLabel.name;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n  const sortBy = (term) => {\n\n    let newOrder = records.sort((a, b) => {\n      let objA;\n      let objB;\n\n      if(term === 'title'){\n        objA = a.title.toUpperCase();\n        objB = b.title.toUpperCase();  \n      } else if(term === 'artist'){\n        objA = artists.find(artist => artist.artistID === a.artistID).name.toUpperCase();\n        objB = artists.find(artist => artist.artistID === b.artistID).name.toUpperCase();\n      }\n      \n      let comparison = 0;\n      if (objA > objB) {\n        comparison = 1;\n      } else if (objA < objB) {\n        comparison = -1;\n      }\n      return comparison;\n    });\n\n\n    return newOrder.map((record, index) => (\n      <Record \n        key={index}\n        index={index}\n        artist={displayArtist(record.artistID)}\n        title={record.title}\n        year={record.year}\n        label={displayLabel(record.labelID)}\n        size={record.size}\n        img={record.cover_imag}\n        />\n    ))\n  }\n\n \n  return(\n    <div className=\"Collection\">\n      {sortBy(sortByTerm)}\n    </div>\n  )\n}\nexport default Collection;"]},"metadata":{},"sourceType":"module"}