{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment } from 'react';\n\nconst changeTerm = (suggestion, setTerm, target) => {\n  setTerm(suggestion);\n  target.style.display = 'none';\n};\n\nconst returnSuggestions = (term, array, setTerm) => {\n  console.log(array); //find match\n\n  if (!term || typeof term !== 'string') {\n    return [];\n  }\n\n  ;\n  let suggestions = array.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1); //return listElement for each suggestion\n\n  return suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    className: \"suggestion\",\n    onClick: e => changeTerm(suggestion, setTerm, e.target),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }\n  }, suggestion));\n};\n\nfunction Autofill({\n  term,\n  array,\n  setTerm\n}) {\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, returnSuggestions(term, array, setTerm));\n}\n\nexport default Autofill;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","changeTerm","suggestion","setTerm","target","style","display","returnSuggestions","term","array","console","log","suggestions","filter","string","toLowerCase","indexOf","map","index","e","Autofill"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAIA,MAAMC,UAAU,GAAG,CAACC,UAAD,EAAaC,OAAb,EAAsBC,MAAtB,KAAgC;AACjDD,EAAAA,OAAO,CAACD,UAAD,CAAP;AACAE,EAAAA,MAAM,CAACC,KAAP,CAAaC,OAAb,GAAsB,MAAtB;AACD,CAHD;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcN,OAAd,KAA0B;AAClDO,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADkD,CAElD;;AACA,MAAG,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA5B,EAAqC;AAAE,WAAO,EAAP;AAAU;;AAAA;AACjD,MAAII,WAAW,GAAGH,KAAK,CAACI,MAAN,CAChBC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6BR,IAAI,CAACO,WAAL,EAA7B,IAAmD,CAAC,CAD9C,CAAlB,CAJkD,CAOhD;;AACF,SAAOH,WAAW,CAACK,GAAZ,CAAgB,CAACf,UAAD,EAAagB,KAAb,kBACvB;AAAG,IAAA,GAAG,EAAEA,KAAR;AAAe,IAAA,SAAS,EAAC,YAAzB;AAAsC,IAAA,OAAO,EAAEC,CAAC,IAAIlB,UAAU,CAACC,UAAD,EAAaC,OAAb,EAAsBgB,CAAC,CAACf,MAAxB,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgGF,UAAhG,CADO,CAAP;AAGD,CAXD;;AAcA,SAASkB,QAAT,CAAmB;AAACZ,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcN,EAAAA;AAAd,CAAnB,EAA2C;AAEzC,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,iBAAiB,CAACC,IAAD,EAAOC,KAAP,EAAcN,OAAd,CADpB,CADF;AAMD;;AAED,eAAeiB,QAAf","sourcesContent":["import React, {Fragment} from 'react';\n\n\n\nconst changeTerm = (suggestion, setTerm, target) =>{\n  setTerm(suggestion);\n  target.style.display ='none';\n}\n\nconst returnSuggestions = (term, array, setTerm) => {\n  console.log(array)\n  //find match\n  if(!term || typeof term !== 'string'){ return []};\n  let suggestions = array.filter(\n    string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n\n    //return listElement for each suggestion\n  return suggestions.map((suggestion, index) => (\n  <p key={index} className=\"suggestion\" onClick={e => changeTerm(suggestion, setTerm, e.target)}>{suggestion}</p>\n  ))\n}\n\n\nfunction Autofill ({term, array, setTerm}) {\n\n  return(\n    <Fragment >\n      {returnSuggestions(term, array, setTerm)}\n    </Fragment>\n  )\n\n}\n\nexport default Autofill;"]},"metadata":{},"sourceType":"module"}