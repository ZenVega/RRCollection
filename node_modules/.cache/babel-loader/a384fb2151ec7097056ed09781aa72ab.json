{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment, useState } from 'react';\n\nconst InputPlusAutofill = ({\n  term,\n  placeholder,\n  list,\n  handleChange,\n  fromTop\n}) => {\n  let OKterm = term ? term : '';\n  const [unclicked, setUnclicked] = useState(true);\n  const [focused, setFocused] = useState(false);\n  let suggestions = list.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      top: fromTop + 'px'\n    },\n    className: \"AutofillInput\",\n    type: \"text\",\n    value: OKterm,\n    onChange: e => {\n      setUnclicked(true);\n      handleChange(e.target.value);\n    },\n    onFocus: () => setFocused(true),\n    onBlur: () => setFocused(false),\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"suggestionWrapper\",\n    style: {\n      top: fromTop + 25 + 'px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, term && focused && unclicked && suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    className: \"suggestion\",\n    onMouseDown: e => {\n      handleChange(suggestion);\n      setUnclicked(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, suggestion))));\n};\n\nexport default InputPlusAutofill;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","useState","InputPlusAutofill","term","placeholder","list","handleChange","fromTop","OKterm","unclicked","setUnclicked","focused","setFocused","suggestions","filter","string","toLowerCase","indexOf","top","e","target","value","map","suggestion","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAwC,OAAxC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,WAAP;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,YAA1B;AAAwCC,EAAAA;AAAxC,CAAD,KAAsD;AAE9E,MAAIC,MAAM,GAAGL,IAAI,GAAEA,IAAF,GAAQ,EAAzB;AAEA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEA,MAAIY,WAAW,GAAGR,IAAI,CAACS,MAAL,CAAYC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6Bd,IAAI,CAACa,WAAL,EAA7B,IAAmD,CAAC,CAA1E,CAAlB;AAEA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAE;AAACE,MAAAA,GAAG,EAAEX,OAAO,GAAG;AAAhB,KADT;AAEE,IAAA,SAAS,EAAC,eAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAEC,MAJT;AAKE,IAAA,QAAQ,EAAEW,CAAC,IAAI;AAACT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAAoBJ,MAAAA,YAAY,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AAA6B,KALnE;AAME,IAAA,OAAO,EAAE,MAAMT,UAAU,CAAC,IAAD,CAN3B;AAOE,IAAA,MAAM,EAAE,MAAMA,UAAU,CAAC,KAAD,CAP1B;AAQE,IAAA,WAAW,EAAER,WARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE;AACA,IAAA,SAAS,EAAC,mBADV;AAEA,IAAA,KAAK,EAAE;AAACc,MAAAA,GAAG,EAAEX,OAAO,GAAG,EAAV,GAAe;AAArB,KAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGIJ,IAAI,IAAIQ,OAAR,IAAmBF,SAAnB,IAAgCI,WAAW,CAACS,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,kBAChD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,WAAW,EAAEL,CAAC,IAAI;AAAEb,MAAAA,YAAY,CAACiB,UAAD,CAAZ;AAA0Bb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAAuB,KAHvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKEa,UALF,CADgC,CAHpC,CAXF,CADF;AA4BD,CArCD;;AAuCA,eAAerB,iBAAf","sourcesContent":["import React, {Fragment, useState} from 'react';\n\nconst InputPlusAutofill = ({term, placeholder, list, handleChange, fromTop}) => {\n\n  let OKterm = term? term: '';\n\n  const [unclicked, setUnclicked] = useState(true); \n  const [focused, setFocused] = useState(false);\n  \n  let suggestions = list.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n\n  return (\n    <Fragment>\n      <input \n        style={{top: fromTop + 'px'}}\n        className=\"AutofillInput\"\n        type=\"text\"\n        value={OKterm}\n        onChange={e => {setUnclicked(true); handleChange(e.target.value)}}\n        onFocus={() => setFocused(true)}\n        onBlur={() => setFocused(false)}\n        placeholder={placeholder}\n      />  \n      <div \n      className=\"suggestionWrapper\"\n      style={{top: fromTop + 25 + 'px'}}>\n        { term && focused && unclicked && suggestions.map((suggestion, index) => ( \n          <p \n            key={index} \n            className=\"suggestion\" \n            onMouseDown={e => { handleChange(suggestion); setUnclicked(false);  }}\n          >\n          { suggestion }\n          </p>\n        ))}\n      </div>\n\n    </Fragment>\n  )\n}\n\nexport default InputPlusAutofill;"]},"metadata":{},"sourceType":"module"}