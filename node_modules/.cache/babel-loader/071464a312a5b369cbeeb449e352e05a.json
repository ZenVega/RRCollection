{"ast":null,"code":"var _jsxFileName = \"/Users/Urs/code/rrcollection/src/components/Autofill.js\";\nimport React, { Fragment } from 'react';\n\nfunction Autofill({\n  term,\n  array,\n  setTerm\n}) {\n  //find match\n  if (!term) {\n    return [];\n  }\n\n  ;\n  let suggestions = array.filter(string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n  /*   const highlightSuggestion = (term, suggestion) => {\n  \n    } */\n\n  const returnSuggestions = () => {\n    return suggestions.map(suggestion => /*#__PURE__*/React.createElement(\"p\", {\n      onClick: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, suggestion));\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, returnSuggestions());\n}\n\nexport default Autofill;","map":{"version":3,"sources":["/Users/Urs/code/rrcollection/src/components/Autofill.js"],"names":["React","Fragment","Autofill","term","array","setTerm","suggestions","filter","string","toLowerCase","indexOf","returnSuggestions","map","suggestion"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,SAASC,QAAT,CAAmB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAnB,EAA2C;AACzC;AACA,MAAG,CAACF,IAAJ,EAAS;AAAE,WAAO,EAAP;AAAU;;AAAA;AAErB,MAAIG,WAAW,GAAGF,KAAK,CAACG,MAAN,CAChBC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,OAArB,CAA6BP,IAAI,CAACM,WAAL,EAA7B,IAAmD,CAAC,CAD9C,CAAlB;AAEF;;;;AAIE,QAAME,iBAAiB,GAAG,MAAM;AAE9B,WAAOL,WAAW,CAACM,GAAZ,CAAgBC,UAAU,iBACjC;AAAG,MAAA,OAAO,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYA,UAAZ,CADO,CAAP;AAGD,GALD;;AAOA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,EADpB,CADF;AAMD;;AAED,eAAeT,QAAf","sourcesContent":["import React, {Fragment} from 'react';\n\nfunction Autofill ({term, array, setTerm}) {\n  //find match\n  if(!term){ return []};\n  \n  let suggestions = array.filter(\n    string => string.toLowerCase().indexOf(term.toLowerCase()) > -1);\n/*   const highlightSuggestion = (term, suggestion) => {\n\n  } */\n\n  const returnSuggestions = () => {\n\n    return suggestions.map(suggestion => (\n    <p onClick>{suggestion}</p>\n    ))\n  }\n\n  return(\n    <Fragment>\n      {returnSuggestions()}\n    </Fragment>\n  )\n\n}\n\nexport default Autofill;"]},"metadata":{},"sourceType":"module"}